name: 'empathic-credit-system-testing'

services:
  # API Gateway
  api-gateway-ecs-nginx:
    image: nginx:1.25.2-alpine
    ports:
      - "9999:9999"
    volumes:
      - ./services/api-gateway-ecs/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - backend-network
    depends_on:
      api-gateway-ecs:
        condition: service_healthy

  api-gateway-ecs:
    image: empathic-credit-system/api-gateway-ecs
    hostname: api-gateway-ecs
    restart: on-failure
    environment:
      API_SECRET_TOKEN: "your-super-secret-and-long-api-token"
      INTERNAL_SERVICE_API_KEY: "your-different-secret-for-internal-services"
      EMOTION_SERVICE_URL: "http://emotion-ingestion-service:8000"
      TRANSACTION_SERVICE_URL: "http://transaction-service:8000"
      USER_CREDIT_SERVICE_URL: "http://user-and-credit-service:8000"
    networks:
      - backend-network
    depends_on:
      - emotion-ingestion-service
      - transaction-service
      - user-and-credit-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2

  # APIs and Workers
  emotion-ingestion-service:
    image: empathic-credit-system/emotion-ingestion-service
    restart: on-failure
    environment:
      NATS_URL: "nats://nats:4222"
    networks:
      - backend-network
      - nats-network
    depends_on:
      nats-stream-provisioner:
        condition: service_completed_successfully
    deploy:
      replicas: 2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]

  emotion-processing-worker:
    image: empathic-credit-system/emotion-processing-worker
    restart: on-failure
    environment:
      NATS_URL: "nats://nats:4222"
      DATABASE_URL: "postgresql://ecsuser:ecspassword@ecs-postgres:5432/ecsdb"
    networks:
      - nats-network
      - ecs-postgres-network
    depends_on:
      nats-stream-provisioner:
        condition: service_completed_successfully
      ecs-postgres:
        condition: service_healthy
    deploy:
      replicas: 1
  
  transaction-service:
    image: empathic-credit-system/transaction-service
    restart: on-failure
    environment:
      NATS_URL: "nats://nats:4222"
    networks:
      - backend-network
      - nats-network
    depends_on:
      nats-stream-provisioner:
        condition: service_completed_successfully
    deploy:
      replicas: 2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]

  transaction-processing-worker:
    image: empathic-credit-system/transaction-processing-worker
    restart: on-failure
    environment:
      NATS_URL: "nats://nats:4222"
      DATABASE_URL: "postgresql://ecsuser:ecspassword@ecs-postgres:5432/ecsdb"
    networks:
      - nats-network
      - ecs-postgres-network
    depends_on:
      nats-stream-provisioner:
        condition: service_completed_successfully
      ecs-postgres:
        condition: service_healthy
    deploy:
      replicas: 1

  credit-analysis-service:
    image: empathic-credit-system/credit-analysis-service
    restart: on-failure
    networks:
      - credit-analysis-service-network
    deploy:
      replicas: 2

  user-and-credit-service:
    image: empathic-credit-system/user-and-credit-service
    environment:
      NATS_URL: "nats://nats:4222"
      DATABASE_URL: "postgresql://ecsuser:ecspassword@ecs-postgres:5432/ecsdb"
      CREDIT_ANALYSIS_SERVICE_URL: "http://credit-analysis-service:8000/v1/predict"
      REDIS_URL: "redis://redis:6379"
    restart: on-failure
    networks:
      - nats-network
      - ecs-postgres-network
      - backend-network
      - credit-analysis-service-network
      - redis-network
    depends_on:
      nats-stream-provisioner:
        condition: service_completed_successfully
      ecs-postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      replicas: 2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]

  credit-application-worker:
    image: empathic-credit-system/credit-application-worker
    restart: on-failure
    environment:
      NATS_URL: "nats://nats:4222"
      DATABASE_URL: "postgresql://ecsuser:ecspassword@ecs-postgres:5432/ecsdb"
    networks:
      - nats-network
      - ecs-postgres-network
    depends_on:
      nats-stream-provisioner:
        condition: service_completed_successfully
      ecs-postgres:
        condition: service_healthy
    deploy:
      replicas: 1  

  # Infrastructure (Messaging e Databases)
  redis:
    image: redis:7.2-alpine
    container_name: redis
    hostname: redis
    networks:
      - redis-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  nats:
    image: nats:2.10.17-alpine
    container_name: nats-server
    command: -js
    ports:
      - "4222:4222"
    networks:
      - nats-network
    healthcheck:
      test: ["CMD", "nats-server", "-v"]

  nats-stream-provisioner:
    image: synadia/nats-box
    container_name: nats-stream-provisioner
    networks:
      - nats-network
    depends_on:
      nats:
        condition: service_healthy
    entrypoint: >
      sh -c "
        until nats --server nats:4222 stream info emotions > /dev/null 2>&1; do
          nats --server nats:4222 stream add emotions --subjects user.emotions.topic --storage memory --retention limits --discard old --dupe-window 2m --max-msgs=-1 --max-bytes=-1 --max-age=0s --max-msg-size=-1 --replicas 1;
          sleep 2;
        done;
        until nats --server nats:4222 stream info transactions > /dev/null 2>&1; do
          nats --server nats:4222 stream add transactions --subjects transactions.topic --storage file --retention limits --discard old --dupe-window 2m --max-msgs=-1 --max-bytes=-1 --max-age=0s --max-msg-size=-1 --replicas 1;
          sleep 2;
        done;
        until nats --server nats:4222 stream info credits > /dev/null 2>&1; do
          nats --server nats:4222 stream add credits --subjects credit.offers.approved --storage file --retention limits --discard old --dupe-window 2m --max-msgs=-1 --max-bytes=-1 --max-age=0s --max-msg-size=-1 --replicas 1;
          sleep 2;
        done;
      "
    restart: on-failure

  ecs-postgres:
    image: postgres:16-alpine
    container_name: ecs-postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ecsuser
      POSTGRES_PASSWORD: ecspassword
      POSTGRES_DB: ecsdb
    volumes:
      - ecs_postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - ecs-postgres-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecsuser -d ecsdb"]

networks:
  backend-network:
    driver: bridge
  credit-analysis-service-network:
    driver: bridge
  nats-network:
    driver: bridge
  ecs-postgres-network:
    driver: bridge
  redis-network:
    driver: bridge

volumes:
  ecs_postgres_data:
