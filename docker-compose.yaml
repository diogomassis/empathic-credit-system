name: 'empathic-credit-system'

services:
  # Emotion Ingestion Service containers
  emotion-ingestion-service-nginx:
    image: nginx:1.25.4-alpine
    container_name: emotion-ingestion-service-nginx
    volumes:
      - ./services/emotion-ingestion-service/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "9999:9999"
    depends_on:
      emotion-ingestion-service:
        condition: service_healthy
    networks:
      - emotion-ingestion-service-network

  emotion-ingestion-service:
    hostname: emotion-ingestion-service
    image: empathic-credit-system/emotion-ingestion-service
    restart: on-failure
    environment:
      NATS_URL: nats://nats:4222
    networks:
      - emotion-ingestion-service-network
      - nats-network
    depends_on:
      nats:
        condition: service_healthy
      nats-stream-provisioner:
        condition: service_completed_successfully
    deploy:
      replicas: 2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  nats:
    image: nats:2.10.17-alpine
    container_name: nats-server
    command: -js
    networks:
      - nats-network
    healthcheck:
      test: ["CMD", "nats-server", "-v"]
      interval: 10s
      timeout: 5s
      retries: 5

  nats-stream-provisioner:
    image: synadia/nats-box
    container_name: nats-stream-provisioner
    networks:
      - nats-network
    depends_on:
      nats:
        condition: service_healthy
    entrypoint: >
      sh -c "
        until nats --server nats:4222 stream info emotions > /dev/null 2>&1; do
          echo 'Tentando criar o stream emotions...'
          nats --server nats:4222 stream add emotions --subjects 'user.emotions.topic' --storage file --retention limits --discard old --dupe-window 2m --max-msgs=-1 --max-bytes=-1 --max-age=0s --max-msg-size=-1 --replicas 1
          sleep 2
        done
      "
    restart: on-failure

  # Emotion Processing Worker containers
  emotion-processing-worker:
    image: empathic-credit-system/emotion-processing-worker
    restart: on-failure
    environment:
      NATS_URL: nats://nats:4222
      DATABASE_URL: "postgresql://ecsuser:ecspassword@ecs-postgres:5432/ecsdb"
    networks:
      - nats-network
      - db-network
    depends_on:
      nats:
        condition: service_healthy
      ecs-postgres:
        condition: service_healthy
    deploy:
      replicas: 1
  
  ecs-postgres:
    image: postgres:16-alpine
    container_name: ecs-postgres
    restart: always
    env_file:
      - ./services/emotion-processing-worker/.env.db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./services/emotion-processing-worker/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - db-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecsuser -d ecsdb"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  # Transaction Service containers
  transaction-service-nginx:
    image: nginx:1.25.4-alpine
    container_name: transaction-service-nginx
    volumes:
      - ./services/transaction-service/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8888:8888"
    networks:
      - transaction-service-network
    depends_on:
      transaction-service:
        condition: service_healthy
  
  transaction-service:
    image: empathic-credit-system/transaction-service
    container_name: transaction-service
    restart: on-failure
    environment:
      RABBITMQ_URL: amqp://guest:guest@rabbitmq-server:5672/
    networks:
      - transaction-service-network
      - rabbitmq-network
    depends_on:
      rabbitmq-server:
        condition: service_healthy
    deploy:
      replicas: 2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  rabbitmq-server:
    image: rabbitmq:3.13-management-alpine
    container_name: rabbitmq-server
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "15672:15672"
    networks:
      - transaction-service-network
      - rabbitmq-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

# Application networks
networks:
  emotion-ingestion-service-network:
    driver: bridge
  transaction-service-network:
    driver: bridge
  nats-network:
    internal: true
  db-network:
    internal: true
  rabbitmq-network:
    internal: true

# Application volumes
volumes:
  postgres_data:
